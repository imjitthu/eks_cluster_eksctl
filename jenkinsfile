pipeline {

    agent any

    parameters {
        choice(name: 'EKS_Cluster', choices: ['Create', 'Delete', 'Install DB & Cache', 'Install Components', 'Install VPA'], description: 'Pick option')
                }

    stages {
        stage ('Creating Eks Cluster') {
            when {
                expression {params.EKS_Cluster == 'Create'}
            }
            steps {
                //sh "eksctl create cluster -f cluster.yml"
                sh "kubectl apply -f role.yml"
            }
        }
        stage ('Deleting Eks Cluster') {
            when {
                expression {params.EKS_Cluster == 'Delete'}
            }
            steps {
                sh '''
                eksctl delete cluster -f cluster.yml
                '''
            }
        }
        stage ('Installing DB and Cache Components') {
            when {
                expression {params.EKS_Cluster == 'Install DB & Cache'}
            }
            steps {
            sh "helm repo add stable https://charts.helm.sh/stable"
            sh "helm repo add prometheus-community https://prometheus-community.github.io/helm-charts"
            sh "helm repo add elastic https://helm.elastic.co"
            sh "helm install prometheus prometheus-community/kube-prometheus-stack"
            sh "helm install grafana stable/grafana"
            sh "helm install redis stable/redis --set usePassword=false"
            sh "helm install mongodb bitnami/mongodb --set auth.enabled=false"
            sh "helm install rabbitmq bitnami/rabbitmq"
            sh "helm install mysql stable/mysql"
            sh "helm install filebeat elastic/filebeat"
            sh "kubectl run workstation --image=jithendar/workstation:2.0 sleep 100000"
            }
        }
        stage ('Installing VPA') {
            when {
                expression {params.EKS_Cluster == 'Install VPA'}
            }
            steps {
            sh "kubectl apply -f metrics_server.yaml"
            git 'https://github.com/kubernetes/autoscaler.git'
            sh "sh vertical-pod-autoscaler/hack/vpa-up.sh"
            }
       }
       stage ('Installing Robosho Components') {
           when {
               expression {params.EKS_Cluster == 'Install Components'}
           }
           steps {
            build 'Rs-Docker/cart'
            // build 'Rs-Docker/catalogue'
            // build 'Rs-Docker/shipping'
            // build 'Rs-Docker/user'
            // build 'Rs-Docker/payment'
            // build 'Rs-Docker/frontend'
           }
       } 
    }
}