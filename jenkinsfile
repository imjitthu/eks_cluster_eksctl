pipeline {

    agent any

    parameters {
        choice(name: 'EKS_Cluster', 
        choices: 
        [
            'Create cluster', 
            'Delete cluster', 
            'Install DB & Cache', 
            'Install Components',
            'Install Web UI', 
            'Install Monitoring tools', 
            'Install VPA'
        ], 
        description: 'Pick Option')
        }

    stages {
        stage ('Creating Eks Cluster') {
            when {expression {params.EKS_Cluster == 'Create cluster'}}
            steps {
                sh "sh iam-authenticator-eks.sh"
                sh "eksctl create cluster -f cluster.yml"
                sh "kubectl apply -f cluster_role.yml"
                sh "kubectl apply -f metrics_server.yaml"
                }
            }
        stage ('Deleting Eks Cluster') {
            when {expression {params.EKS_Cluster == 'Delete cluster'}}
            steps {
                sh "eksctl delete cluster -f cluster.yml"
            }
        }
        stage ('Install Web UI') {
            when {expression {params.EKS_Cluster == 'Install Web UI'}}
            steps {
                //https://github.com/kubernetes/dashboard
                sh "kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.2.0/aio/deploy/recommended.yaml"
                sh "kubectl proxy"
                //Now access Dashboard at
                //http://lab.jithendar.com:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/
            }
        }
        stage ('Installing DB and Cache Components') {
            when {expression {params.EKS_Cluster == 'Install DB & Cache'}}
            steps {
            sh "helm repo add stable https://charts.helm.sh/stable"
            sh "helm install redis stable/redis --set usePassword=false"
            sh "helm install mongodb bitnami/mongodb --set auth.enabled=false"
            sh "helm install rabbitmq bitnami/rabbitmq"
            sh "helm install mysql stable/mysql"
            }
        }
        stage ('Install Prometheus & Grafana') {
            when {expression {params.EKS_Cluster == 'Install Monitoring tools'}}
            steps {
            sh "helm repo add prometheus-community https://prometheus-community.github.io/helm-charts"
            sh "helm repo add elastic https://helm.elastic.co"
            sh "helm install prometheus prometheus-community/kube-prometheus-stack"
            sh "helm install grafana stable/grafana"
            sh "helm install filebeat elastic/filebeat"
            }
        }
        stage ('Installing VPA') {
            when {expression {params.EKS_Cluster == 'Install VPA'}}
            steps {
            git 'https://github.com/kubernetes/autoscaler.git'
            sh "sh vertical-pod-autoscaler/hack/vpa-up.sh"
            }
       }
       stage ('Installing Robosho Components') {
           when {expression {params.EKS_Cluster == 'Install Components'}}
           steps {
            script {
                kubernetesDeploy(configs: "pods/cart.yml", kubeconfigId: "kubeconfig_deploy")
                kubernetesDeploy(configs: "pods/catalogue.yml", kubeconfigId: "kubeconfig_deploy")
                kubernetesDeploy(configs: "pods/frontend.yml", kubeconfigId: "kubeconfig_deploy")
                kubernetesDeploy(configs: "pods/payment.yml", kubeconfigId: "kubeconfig_deploy")
                kubernetesDeploy(configs: "pods/shipping.yml", kubeconfigId: "kubeconfig_deploy")
                kubernetesDeploy(configs: "pods/user.yml", kubeconfigId: "kubeconfig_deploy")
                sh "kubectl run workstation --image=jithendar/workstation:2.0 sleep 100000"
                //kubernetesDeploy(configs: "pods/workstation.yml", kubeconfigId: "kubeconfig_deploy")
                }
                }
           }
       } 
    }